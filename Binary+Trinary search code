///////////////////////////***************************************////////////////////////////////
//                                       BINARY SEARCH                                          //
///////////////////////////***************************************////////////////////////////////
int Binary_Search(int a[], int n, int x)
{
	int lo = 0, hi = n - 1;
	while(lo<=hi)
	{
		int mid = (lo + hi) / 2;
		if(x==a[mid])
			return mid;
		else if(x>a[mid])
			lo = mid + 1;
		else
			hi = mid - 1;
	}
	return -1;
}

///////////////////////////***************************************////////////////////////////////
//                                      TRINARY SEARCH                                          //
///////////////////////////***************************************////////////////////////////////

int Ternary_Search(int a[],int n,int x)
{
    int lo=0,hi=n-1;
    while(lo<=hi)
    {
        int md1=lo+(hi+lo)/3;
        int md2=md1+(hi+lo)/3;
        if(x==a[md1])return md1;
        else if(x==a[md2])return md2;
        else if(x<md1)hi=md1-1;
        else if(x>md1 && x<md2){
            lo=md1+1;
            hi=md2-1;
        }
        else lo=md2+1;
    }
    return -1;
}
